workflows:
  ios-development:
    name: iOS Development Build - iOS 18.6 Optimized
    environment:
      vars:
        BUNDLE_ID: "com.example.zapItMobile"
        FLUTTER_VERSION: "3.24.5"
        IOS_DEPLOYMENT_TARGET: "12.0"
        XCODE_VERSION: "latest"
      flutter: stable
      xcode: latest
      cocoapods: default
      ios_signing:
        certificates:
          - Zap It
        provisioning_profiles:
          - Zap it Development
    scripts:
      - name: Set up Flutter version
        script: |
          flutter --version
          echo "Using Flutter version: $FLUTTER_VERSION"
          echo "iOS Deployment Target: $IOS_DEPLOYMENT_TARGET"
          echo "Xcode version: $(xcodebuild -version)"
      - name: Get Flutter packages
        script: |
          flutter pub get
          flutter pub deps
          echo "✅ Flutter packages installed"
      - name: Generate app icons
        script: |
          echo "Generating app icons with flutter_launcher_icons..."
          flutter pub run flutter_launcher_icons:main
          echo "✅ App icons generated"
      - name: Install CocoaPods
        script: |
          cd ios
          pod install --repo-update
          echo "✅ CocoaPods installed"
          cd ..
      - name: Verify iOS configuration
        script: |
          echo "=== iOS Configuration Verification ==="
          echo "Checking Info.plist..."
          if grep -q "UIBackgroundModes" ios/Runner/Info.plist; then
            echo "✅ Background modes configured"
          else
            echo "❌ Background modes missing"
            exit 1
          fi
          
          if grep -q "NSHapticFeedbackUsageDescription" ios/Runner/Info.plist; then
            echo "✅ Haptic feedback permissions configured"
          else
            echo "❌ Haptic feedback permissions missing"
            exit 1
          fi
          
          echo "Checking AppDelegate.swift..."
          if grep -q "MessagingDelegate" ios/Runner/AppDelegate.swift; then
            echo "✅ Firebase Messaging configured"
          else
            echo "❌ Firebase Messaging missing"
            exit 1
          fi
          
          echo "✅ iOS 18.6 configuration verified"
      - name: Extract signing info
        script: |
          PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
          if [ -z "$PROFILE_PATH" ]; then
            echo "❌ No provisioning profile found"
            exit 1
          fi
          TEAM_ID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract TeamIdentifier.0 raw -)
          CERT_NAME=$(security find-identity -v -p codesigning | grep "Apple Development" | head -1 | sed 's/.*"\(.*\)"/\1/')
          if [ -z "$TEAM_ID" ] || [ -z "$CERT_NAME" ]; then
            echo "❌ Failed to extract signing information"
            exit 1
          fi
          echo "Team ID: $TEAM_ID"
          echo "Certificate: $CERT_NAME"
          echo "Profile: Zap it Development"
          echo "export DEVELOPMENT_TEAM=\"$TEAM_ID\"" >> $CM_ENV
          echo "export CODE_SIGN_IDENTITY=\"$CERT_NAME\"" >> $CM_ENV
      - name: Build Flutter for iOS (no codesign)
        script: |
          echo "Building Flutter iOS for iOS 18.6..."
          flutter clean
          flutter build ios --release --no-codesign --verbose
          echo "✅ Flutter iOS build completed"
      - name: Archive with xcodebuild (workspace) - iOS 18.6 Optimized
        script: |
          cd ios
          echo "Cleaning previous builds..."
          xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release
          
          echo "Creating archive for iOS 18.6..."
          xcodebuild archive \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ../build/ios/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="Zap it Development" \
            IPHONEOS_DEPLOYMENT_TARGET="$IOS_DEPLOYMENT_TARGET" \
            -allowProvisioningUpdates
          echo "✅ Archive created successfully"
      - name: Export IPA - iOS 18.6 Optimized
        script: |
          # Re-extract team ID in case environment variable didn't persist
          PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
          TEAM_ID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract TeamIdentifier.0 raw -)
          echo "Using Team ID for export: $TEAM_ID"
          
          cd ios
          echo "Creating ExportOptions.plist for iOS 18.6..."
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key>
              <string>Zap it Development</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          
          echo "Exporting IPA for iOS 18.6..."
          mkdir -p ../build/ios/ipa
          xcodebuild -exportArchive \
            -archivePath ../build/ios/Runner.xcarchive \
            -exportPath ../build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates
          echo "✅ IPA exported successfully"
      - name: Verify build - iOS 18.6 Features
        script: |
          echo "=== iOS 18.6 Build Verification ==="
          if [ -d "build/ios/Runner.xcarchive" ]; then
            echo "✅ Archive created successfully"
            echo "Archive size: $(du -sh build/ios/Runner.xcarchive | cut -f1)"
          else
            echo "❌ Archive not found"
            exit 1
          fi
          
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "✅ IPA created successfully"
            IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -1)
            echo "IPA file: $IPA_FILE"
            echo "IPA size: $(ls -lh "$IPA_FILE" | awk '{print $5}')"
            
            # Verify IPA contents for iOS 18.6 features
            echo "Verifying IPA contents for iOS 18.6..."
            unzip -l "$IPA_FILE" | grep -E "(Info\.plist|AppDelegate|Runner\.app)" | head -5
            
            # Check for iOS 18.6 specific features
            echo "Checking for iOS 18.6 features..."
            if unzip -p "$IPA_FILE" "Payload/Runner.app/Info.plist" | grep -q "UIBackgroundModes"; then
              echo "✅ Background modes included"
            else
              echo "❌ Background modes missing from IPA"
            fi
            
            if unzip -p "$IPA_FILE" "Payload/Runner.app/Info.plist" | grep -q "NSHapticFeedbackUsageDescription"; then
              echo "✅ Haptic feedback permissions included"
            else
              echo "❌ Haptic feedback permissions missing from IPA"
            fi
            
            echo "✅ iOS 18.6 build verification completed"
          else
            echo "❌ IPA not found"
            echo "Export logs:"
            ls -la /var/folders/*/T/Runner_*.xcdistributionlogs 2>/dev/null || echo "No export logs found"
            echo "IPA directory contents:"
            ls -la build/ios/ipa/ || echo "IPA directory not found"
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/Runner.xcarchive/**/*
      - ios/ExportOptions.plist
      - build/ios/archive.xcresult
    publishing:
      email:
        recipients:
          - your-email@example.com

  android-development:
    name: Android Development Build
    environment:
      vars:
        PACKAGE_NAME: "com.example.zap_it_mobile"
        FLUTTER_VERSION: "3.24.5"
      flutter: stable
      android_signing:
        - keystore_reference
        - google_play
    scripts:
      - name: Set up Flutter version
        script: |
          flutter --version
          echo "Using Flutter version: $FLUTTER_VERSION"
      - name: Get Flutter packages
        script: |
          flutter pub get
          flutter pub deps
      - name: Generate app icons
        script: |
          echo "Generating app icons with flutter_launcher_icons..."
          flutter pub run flutter_launcher_icons:main
      - name: Build APK
        script: |
          echo "Building Android APK..."
          flutter clean
          flutter build apk --release
      - name: Build App Bundle
        script: |
          echo "Building Android App Bundle..."
          flutter build appbundle --release
      - name: Verify build
        script: |
          echo "=== Build Verification ==="
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ APK created successfully"
            echo "APK size: $(ls -lh build/app/outputs/flutter-apk/app-release.apk | awk '{print $5}')"
          else
            echo "❌ APK not found"
            exit 1
          fi
          
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "✅ App Bundle created successfully"
            echo "AAB size: $(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')"
          else
            echo "❌ App Bundle not found"
            exit 1
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
    publishing:
      email:
        recipients:
          - your-email@example.com
