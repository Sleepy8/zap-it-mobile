workflows:
  ios-development:
    name: iOS Development Build - iOS 18.6 Optimized
    environment:
      vars:
        BUNDLE_ID: "com.example.zapItMobile"
        FLUTTER_VERSION: "3.24.5"
        IOS_DEPLOYMENT_TARGET: "12.0"
        XCODE_VERSION: "latest"
      flutter: stable
      xcode: latest
      cocoapods: default
      ios_signing:
        certificates:
          - Zap It
        provisioning_profiles:
          - Zap it Development
    scripts:
      - name: Set up Flutter version
        script: |
          flutter --version
          echo "Using Flutter version: $FLUTTER_VERSION"
          echo "iOS Deployment Target: $IOS_DEPLOYMENT_TARGET"
          echo "Xcode version: $(xcodebuild -version)"
      - name: Get Flutter packages
        script: |
          flutter pub get
          flutter pub deps
          echo "✅ Flutter packages installed"
      - name: Generate app icons
        script: |
          echo "Generating app icons with flutter_launcher_icons..."
          flutter pub run flutter_launcher_icons:main
          echo "✅ App icons generated"
      - name: Install CocoaPods
        script: |
          cd ios
          pod install --repo-update
          echo "✅ CocoaPods installed"
          cd ..
      - name: Verify iOS configuration
        script: |
          echo "=== iOS Configuration Verification ==="
          echo "Checking Info.plist..."
          if grep -q "UIBackgroundModes" ios/Runner/Info.plist; then
            echo "✅ Background modes configured"
          else
            echo "❌ Background modes missing"
            exit 1
          fi
          
          if grep -q "NSHapticFeedbackUsageDescription" ios/Runner/Info.plist; then
            echo "✅ Haptic feedback permissions configured"
          else
            echo "❌ Haptic feedback permissions missing"
            exit 1
          fi
          
          echo "Checking AppDelegate.swift..."
          if grep -q "MessagingDelegate" ios/Runner/AppDelegate.swift; then
            echo "✅ Firebase Messaging configured"
          else
            echo "❌ Firebase Messaging missing"
            exit 1
          fi
          
          echo "✅ iOS 18.6 configuration verified"
      - name: Extract signing info
        script: |
          echo "=== Extracting Signing Information ==="
          PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
          if [ -z "$PROFILE_PATH" ]; then
            echo "❌ No provisioning profile found"
            echo "Available profiles:"
            ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || echo "No profiles directory found"
            exit 1
          fi
          echo "Found profile: $PROFILE_PATH"
          
          TEAM_ID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract TeamIdentifier.0 raw -)
          CERT_NAME=$(security find-identity -v -p codesigning | grep "Apple Development" | head -1 | sed 's/.*"\(.*\)"/\1/')
          
          if [ -z "$TEAM_ID" ] || [ -z "$CERT_NAME" ]; then
            echo "❌ Failed to extract signing information"
            echo "Available certificates:"
            security find-identity -v -p codesigning
            exit 1
          fi
          
          echo "Team ID: $TEAM_ID"
          echo "Certificate: $CERT_NAME"
          echo "Profile: Zap it Development"
          echo "export DEVELOPMENT_TEAM=\"$TEAM_ID\"" >> $CM_ENV
          echo "export CODE_SIGN_IDENTITY=\"$CERT_NAME\"" >> $CM_ENV
          echo "✅ Signing information extracted successfully"
      - name: Archive with xcodebuild (workspace) - iOS 18.6 Optimized
        script: |
          cd ios
          echo "=== Creating Archive ==="
          echo "Current directory: $(pwd)"
          echo "Workspace exists: $(ls -la Runner.xcworkspace 2>/dev/null || echo 'No workspace found')"
          
          echo "Cleaning previous builds..."
          xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release || echo "Clean failed, continuing..."
          
          echo "Creating archive for iOS 18.6..."
          echo "Using Team ID: $DEVELOPMENT_TEAM"
          echo "Using Certificate: $CODE_SIGN_IDENTITY"
          
          # Try Flutter build first (bypasses Xcode project issues)
          cd ..
          echo "Attempting Flutter iOS build..."
          flutter build ios --release --no-codesign --verbose
          FLUTTER_EXIT_CODE=$?
          
          echo "Flutter build exit code: $FLUTTER_EXIT_CODE"
          
          # Check if Flutter build succeeded and app bundle exists
          if [ $FLUTTER_EXIT_CODE -eq 0 ] && [ -d "build/ios/Release-iphoneos/Runner.app" ]; then
            echo "✅ Flutter build succeeded"
            APP_SIZE=$(du -sh build/ios/Release-iphoneos/Runner.app | cut -f1)
            echo "App size: $APP_SIZE"
            
            # Additional check to ensure app bundle is not empty
            if [ "$APP_SIZE" = "0B" ] || [ "$APP_SIZE" = "0" ]; then
              echo "❌ App bundle is empty, Flutter build failed despite exit code 0"
              FLUTTER_EXIT_CODE=1
            else
              # Create archive structure manually
              mkdir -p build/ios/Runner.xcarchive/Products/Applications
              cp -r build/ios/Release-iphoneos/Runner.app build/ios/Runner.xcarchive/Products/Applications/
              
              # Create Info.plist for the archive
              cat > build/ios/Runner.xcarchive/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>ApplicationProperties</key>
            <dict>
              <key>ApplicationPath</key>
              <string>Applications/Runner.app</string>
              <key>CFBundleIdentifier</key>
              <string>$BUNDLE_ID</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>SigningIdentity</key>
              <string>Apple Development</string>
            </dict>
            <key>ArchiveVersion</key>
            <integer>2</integer>
            <key>CreationDate</key>
            <date>$(date -u +%Y-%m-%dT%H:%M:%SZ)</date>
            <key>Name</key>
            <string>Runner</string>
            <key>SchemeName</key>
            <string>Runner</string>
          </dict>
          </plist>
          EOF
              
              echo "✅ Manual archive created with proper structure"
              ls -la build/ios/Runner.xcarchive/
            fi
          fi
          
          # If Flutter build failed, try xcodebuild
          if [ $FLUTTER_EXIT_CODE -ne 0 ] || [ "$APP_SIZE" = "0B" ] || [ "$APP_SIZE" = "0" ]; then
            echo "❌ Flutter build failed, trying xcodebuild..."
            cd ios
            
            # Try xcodebuild with different approach
            echo "Trying xcodebuild with SKIP_INSTALL..."
            xcodebuild build \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -configuration Release \
              -destination 'generic/platform=iOS' \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
              PROVISIONING_PROFILE_SPECIFIER="Zap it Development" \
              IPHONEOS_DEPLOYMENT_TARGET="$IOS_DEPLOYMENT_TARGET" \
              SKIP_INSTALL=YES \
              BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
              -allowProvisioningUpdates \
              -verbose
            
            XCODE_EXIT_CODE=$?
            echo "xcodebuild exit code: $XCODE_EXIT_CODE"
            
            # Check if build succeeded
            if [ $XCODE_EXIT_CODE -eq 0 ] && [ -d "../build/ios/Release-iphoneos/Runner.app" ]; then
              XCODE_APP_SIZE=$(du -sh ../build/ios/Release-iphoneos/Runner.app | cut -f1)
              echo "xcodebuild app size: $XCODE_APP_SIZE"
              
              if [ "$XCODE_APP_SIZE" != "0B" ] && [ "$XCODE_APP_SIZE" != "0" ]; then
                echo "✅ xcodebuild succeeded, creating archive manually..."
                mkdir -p ../build/ios/Runner.xcarchive/Products/Applications
                cp -r ../build/ios/Release-iphoneos/Runner.app ../build/ios/Runner.xcarchive/Products/Applications/
                
                # Create Info.plist for the archive
                cat > ../build/ios/Runner.xcarchive/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>ApplicationProperties</key>
            <dict>
              <key>ApplicationPath</key>
              <string>Applications/Runner.app</string>
              <key>CFBundleIdentifier</key>
              <string>$BUNDLE_ID</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>SigningIdentity</key>
              <string>Apple Development</string>
            </dict>
            <key>ArchiveVersion</key>
            <integer>2</integer>
            <key>CreationDate</key>
            <date>$(date -u +%Y-%m-%dT%H:%M:%SZ)</date>
            <key>Name</key>
            <string>Runner</string>
            <key>SchemeName</key>
            <string>Runner</string>
          </dict>
          </plist>
          EOF
                
                echo "✅ Manual archive created from xcodebuild"
              else
                echo "❌ xcodebuild created empty app bundle"
                exit 1
              fi
            else
              echo "❌ xcodebuild failed"
              exit 1
            fi
            
            cd ..
          fi
      - name: Export IPA - iOS 18.6 Optimized
        script: |
          echo "=== Exporting IPA ==="
          # Re-extract team ID in case environment variable didn't persist
          PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
          TEAM_ID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract TeamIdentifier.0 raw -)
          echo "Using Team ID for export: $TEAM_ID"
          
          echo "Creating IPA directly from build artifacts..."
          
          # Check if we have a valid app bundle from either Flutter or xcodebuild
          APP_BUNDLE_PATH=""
          if [ -d "build/ios/Release-iphoneos/Runner.app" ]; then
            APP_BUNDLE_PATH="build/ios/Release-iphoneos/Runner.app"
          elif [ -d "build/ios/Debug-iphoneos/Runner.app" ]; then
            APP_BUNDLE_PATH="build/ios/Debug-iphoneos/Runner.app"
          fi
          
          if [ -n "$APP_BUNDLE_PATH" ] && [ -d "$APP_BUNDLE_PATH" ]; then
            echo "✅ Found valid app bundle at: $APP_BUNDLE_PATH"
            APP_SIZE=$(du -sh "$APP_BUNDLE_PATH" | cut -f1)
            echo "App size: $APP_SIZE"
            
            # Additional check to ensure app bundle is not empty
            if [ "$APP_SIZE" = "0B" ] || [ "$APP_SIZE" = "0" ]; then
              echo "❌ App bundle is empty, cannot create IPA"
              exit 1
            fi
            
            # Create IPA directory
            mkdir -p build/ios/ipa
            cd build/ios/ipa
            
            # Create Payload directory
            mkdir -p Payload
            
            # Copy app bundle
            cp -r "../../$APP_BUNDLE_PATH" Payload/
            
            # Sign the app bundle properly
            echo "Signing app bundle..."
            codesign --force --sign "$CODE_SIGN_IDENTITY" \
              --entitlements ../../../ios/Runner/Runner.entitlements \
              --timestamp=none \
              Payload/Runner.app
            
            # Verify signing
            echo "Verifying app signature..."
            codesign -dv Payload/Runner.app
            
            # Create IPA
            echo "Creating IPA..."
            zip -r "Zap It.ipa" Payload/
            
            echo "✅ IPA created successfully: Zap It.ipa"
            IPA_SIZE=$(ls -lh "Zap It.ipa" | awk '{print $5}')
            echo "IPA size: $IPA_SIZE"
            
            # Verify IPA contents
            echo "Verifying IPA contents:"
            unzip -l "Zap It.ipa" | head -15
            
            cd ../..
            
          else
            echo "❌ No valid app bundle found"
            echo "Available build artifacts:"
            ls -la build/ios/ || echo "No build directory found"
            if [ -d "build/ios" ]; then
              find build/ios -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
            fi
            exit 1
          fi
      - name: Verify build - iOS 18.6 Features
        script: |
          echo "=== iOS 18.6 Build Verification ==="
          
          # Check archive
          if [ -d "build/ios/Runner.xcarchive" ]; then
            echo "✅ Archive found"
            echo "Archive size: $(du -sh build/ios/Runner.xcarchive | cut -f1)"
          else
            echo "❌ Archive not found"
            echo "Build directory contents:"
            ls -la build/ios/ || echo "Build directory not found"
            exit 1
          fi
          
          # Check IPA
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "✅ IPA found"
            IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -1)
            echo "IPA file: $IPA_FILE"
            echo "IPA size: $(ls -lh "$IPA_FILE" | awk '{print $5}')"
            
            # Verify IPA contents for iOS 18.6 features
            echo "Verifying IPA contents for iOS 18.6..."
            unzip -l "$IPA_FILE" | grep -E "(Info\.plist|AppDelegate|Runner\.app)" | head -5
            
            # Check for iOS 18.6 specific features
            echo "Checking for iOS 18.6 features..."
            if unzip -p "$IPA_FILE" "Payload/Runner.app/Info.plist" | grep -q "UIBackgroundModes"; then
              echo "✅ Background modes included"
            else
              echo "❌ Background modes missing from IPA"
            fi
            
            if unzip -p "$IPA_FILE" "Payload/Runner.app/Info.plist" | grep -q "NSHapticFeedbackUsageDescription"; then
              echo "✅ Haptic feedback permissions included"
            else
              echo "❌ Haptic feedback permissions missing from IPA"
            fi
            
            echo "✅ iOS 18.6 build verification completed"
          else
            echo "❌ IPA not found"
            echo "Export logs:"
            ls -la /var/folders/*/T/Runner_*.xcdistributionlogs 2>/dev/null || echo "No export logs found"
            echo "IPA directory contents:"
            ls -la build/ios/ipa/ || echo "IPA directory not found"
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/Runner.xcarchive/**/*
      - ios/ExportOptions.plist
      - build/ios/archive.xcresult
    publishing:
      email:
        recipients:
          - your-email@example.com

  android-development:
    name: Android Development Build
    environment:
      vars:
        PACKAGE_NAME: "com.example.zap_it_mobile"
        FLUTTER_VERSION: "3.24.5"
      flutter: stable
      android_signing:
        - keystore_reference
        - google_play
    scripts:
      - name: Set up Flutter version
        script: |
          flutter --version
          echo "Using Flutter version: $FLUTTER_VERSION"
      - name: Get Flutter packages
        script: |
          flutter pub get
          flutter pub deps
      - name: Generate app icons
        script: |
          echo "Generating app icons with flutter_launcher_icons..."
          flutter pub run flutter_launcher_icons:main
      - name: Build APK
        script: |
          echo "Building Android APK..."
          flutter clean
          flutter build apk --release
      - name: Build App Bundle
        script: |
          echo "Building Android App Bundle..."
          flutter build appbundle --release
      - name: Verify build
        script: |
          echo "=== Build Verification ==="
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ APK created successfully"
            echo "APK size: $(ls -lh build/app/outputs/flutter-apk/app-release.apk | awk '{print $5}')"
          else
            echo "❌ APK not found"
            exit 1
          fi
          
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "✅ App Bundle created successfully"
            echo "AAB size: $(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')"
          else
            echo "❌ App Bundle not found"
            exit 1
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
    publishing:
      email:
        recipients:
          - your-email@example.com
